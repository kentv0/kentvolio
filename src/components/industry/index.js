import React, { Component } from "react"
import { HashRouter, Route } from "react-router-dom"

import Title    from "../title"
import Basecard from "../basecard"
import Carousel from "../carousel"

const Internship_01 = () => ( <Basecard deck={ data_forIntern_01 } /> )
const Internship_02 = () => ( <Basecard deck={ data_forIntern_02 } /> )

class Industry extends Component {
    render() {
        return (
          <HashRouter basename="/industry">
            <div class="main-container">
              <Title strings={ data_forTitle } />
              <Carousel thumbnails={ data_forCarousel } />
              <Route path="/" exact component={ Internship_01 } />
              <Route path="/intern-01" component={ Internship_01 } />
              <Route path="/intern-02" component={ Internship_02 } />
            </div>
          </HashRouter>
        );
    }
}

const data_forTitle = [ 'I','N','D','U','S','T','R','Y' ]

const data_forCarousel = [
    {
        heading1: 'Date: ',
        content1: '2016-OCT-14',
        heading2: 'Position: ',
        content2: 'Student Contractor',
        heading3: 'Location: ',
        content3: 'San Diego, CA',
        icon: 'intern-01-icon',
        link: '/intern-01',
        svg: 'M276.122,90.995c3.69,7.828,7.473,16.965,11.744,27.326c0.606,1.462,1.206,2.925,1.806,4.37h199.929c7.687,0,14.938,1.83,21.42,5v-6.096c0-16.897-13.703-30.6-30.601-30.6H276.122z M489.601,141.057H277.487c-6.965-16.102-14.651-36.512-21.653-49.474c-4.143-7.675-8.054-12.748-11.426-12.748H34.67C15.526,78.834,0,92.537,0,109.435v62.222v27.969v211.139c0,16.898,13.703,30.602,30.6,30.602h459c16.896,0,30.6-13.703,30.6-30.602V171.656c0-8.549-3.525-16.267-9.18-21.817C505.5,144.416,497.948,141.057,489.601,141.057z'
    },
    {
        heading1: 'Date: ',
        content1: '2017-FEB-03',
        heading2: 'Position: ',
        content2: 'Student Contractor',
        heading3: 'Location: ',
        content3: 'San Diego, CA',
        icon: 'intern-01-icon',
        link: '/intern-02',
        svg: 'M276.122,90.995c3.69,7.828,7.473,16.965,11.744,27.326c0.606,1.462,1.206,2.925,1.806,4.37h199.929c7.687,0,14.938,1.83,21.42,5v-6.096c0-16.897-13.703-30.6-30.601-30.6H276.122z M489.601,141.057H277.487c-6.965-16.102-14.651-36.512-21.653-49.474c-4.143-7.675-8.054-12.748-11.426-12.748H34.67C15.526,78.834,0,92.537,0,109.435v62.222v27.969v211.139c0,16.898,13.703,30.602,30.6,30.602h459c16.896,0,30.6-13.703,30.6-30.602V171.656c0-8.549-3.525-16.267-9.18-21.817C505.5,144.416,497.948,141.057,489.601,141.057z'
    },
    { svg: 'M 9.539489 9.12441 L 500.655114 481.839623 M -63.500568 16.439416 L -64.50142 17.43809 M 8.642045 490.580778 L 508.499432 12.437353 M 844.50142 110.436321 L 844.50142 108.438974 M 826.500852 114.438384 L 833.499432 114.438384 M 867.498864 107.436616 L 866.501705 107.436616 M 2.500284 13.937205 C 2.500284 20.290389 8.095455 25.438532 15.001705 25.438532 C 21.904261 25.438532 27.499432 20.290389 27.499432 13.937205 C 27.499432 7.587706 21.904261 2.439564 15.001705 2.439564 C 8.095455 2.439564 2.500284 7.587706 2.500284 13.937205 M 492.500568 13.937205 C 492.500568 20.290389 498.095739 25.438532 504.998295 25.438532 C 511.904545 25.438532 517.499716 20.290389 517.499716 13.937205 C 517.499716 7.587706 511.904545 2.439564 504.998295 2.439564 C 498.095739 2.439564 492.500568 7.587706 492.500568 13.937205 M 2.500284 486.081221 C 2.500284 492.430719 8.095455 497.578862 15.001705 497.578862 C 21.904261 497.578862 27.499432 492.430719 27.499432 486.081221 C 27.499432 479.728037 21.904261 474.579894 15.001705 474.579894 C 8.095455 474.579894 2.500284 479.728037 2.500284 486.081221 M 492.500568 486.081221 C 492.500568 492.430719 498.095739 497.578862 504.998295 497.578862 C 511.904545 497.578862 517.499716 492.430719 517.499716 486.081221 C 517.499716 479.728037 511.904545 474.579894 504.998295 474.579894 C 498.095739 474.579894 492.500568 479.728037 492.500568 486.081221' },
    { svg: 'M 9.539489 9.12441 L 500.655114 481.839623 M -63.500568 16.439416 L -64.50142 17.43809 M 8.642045 490.580778 L 508.499432 12.437353 M 844.50142 110.436321 L 844.50142 108.438974 M 826.500852 114.438384 L 833.499432 114.438384 M 867.498864 107.436616 L 866.501705 107.436616 M 2.500284 13.937205 C 2.500284 20.290389 8.095455 25.438532 15.001705 25.438532 C 21.904261 25.438532 27.499432 20.290389 27.499432 13.937205 C 27.499432 7.587706 21.904261 2.439564 15.001705 2.439564 C 8.095455 2.439564 2.500284 7.587706 2.500284 13.937205 M 492.500568 13.937205 C 492.500568 20.290389 498.095739 25.438532 504.998295 25.438532 C 511.904545 25.438532 517.499716 20.290389 517.499716 13.937205 C 517.499716 7.587706 511.904545 2.439564 504.998295 2.439564 C 498.095739 2.439564 492.500568 7.587706 492.500568 13.937205 M 2.500284 486.081221 C 2.500284 492.430719 8.095455 497.578862 15.001705 497.578862 C 21.904261 497.578862 27.499432 492.430719 27.499432 486.081221 C 27.499432 479.728037 21.904261 474.579894 15.001705 474.579894 C 8.095455 474.579894 2.500284 479.728037 2.500284 486.081221 M 492.500568 486.081221 C 492.500568 492.430719 498.095739 497.578862 504.998295 497.578862 C 511.904545 497.578862 517.499716 492.430719 517.499716 486.081221 C 517.499716 479.728037 511.904545 474.579894 504.998295 474.579894 C 498.095739 474.579894 492.500568 479.728037 492.500568 486.081221' },
    { svg: 'M 9.539489 9.12441 L 500.655114 481.839623 M -63.500568 16.439416 L -64.50142 17.43809 M 8.642045 490.580778 L 508.499432 12.437353 M 844.50142 110.436321 L 844.50142 108.438974 M 826.500852 114.438384 L 833.499432 114.438384 M 867.498864 107.436616 L 866.501705 107.436616 M 2.500284 13.937205 C 2.500284 20.290389 8.095455 25.438532 15.001705 25.438532 C 21.904261 25.438532 27.499432 20.290389 27.499432 13.937205 C 27.499432 7.587706 21.904261 2.439564 15.001705 2.439564 C 8.095455 2.439564 2.500284 7.587706 2.500284 13.937205 M 492.500568 13.937205 C 492.500568 20.290389 498.095739 25.438532 504.998295 25.438532 C 511.904545 25.438532 517.499716 20.290389 517.499716 13.937205 C 517.499716 7.587706 511.904545 2.439564 504.998295 2.439564 C 498.095739 2.439564 492.500568 7.587706 492.500568 13.937205 M 2.500284 486.081221 C 2.500284 492.430719 8.095455 497.578862 15.001705 497.578862 C 21.904261 497.578862 27.499432 492.430719 27.499432 486.081221 C 27.499432 479.728037 21.904261 474.579894 15.001705 474.579894 C 8.095455 474.579894 2.500284 479.728037 2.500284 486.081221 M 492.500568 486.081221 C 492.500568 492.430719 498.095739 497.578862 504.998295 497.578862 C 511.904545 497.578862 517.499716 492.430719 517.499716 486.081221 C 517.499716 479.728037 511.904545 474.579894 504.998295 474.579894 C 498.095739 474.579894 492.500568 479.728037 492.500568 486.081221' },
    { svg: 'M 9.539489 9.12441 L 500.655114 481.839623 M -63.500568 16.439416 L -64.50142 17.43809 M 8.642045 490.580778 L 508.499432 12.437353 M 844.50142 110.436321 L 844.50142 108.438974 M 826.500852 114.438384 L 833.499432 114.438384 M 867.498864 107.436616 L 866.501705 107.436616 M 2.500284 13.937205 C 2.500284 20.290389 8.095455 25.438532 15.001705 25.438532 C 21.904261 25.438532 27.499432 20.290389 27.499432 13.937205 C 27.499432 7.587706 21.904261 2.439564 15.001705 2.439564 C 8.095455 2.439564 2.500284 7.587706 2.500284 13.937205 M 492.500568 13.937205 C 492.500568 20.290389 498.095739 25.438532 504.998295 25.438532 C 511.904545 25.438532 517.499716 20.290389 517.499716 13.937205 C 517.499716 7.587706 511.904545 2.439564 504.998295 2.439564 C 498.095739 2.439564 492.500568 7.587706 492.500568 13.937205 M 2.500284 486.081221 C 2.500284 492.430719 8.095455 497.578862 15.001705 497.578862 C 21.904261 497.578862 27.499432 492.430719 27.499432 486.081221 C 27.499432 479.728037 21.904261 474.579894 15.001705 474.579894 C 8.095455 474.579894 2.500284 479.728037 2.500284 486.081221 M 492.500568 486.081221 C 492.500568 492.430719 498.095739 497.578862 504.998295 497.578862 C 511.904545 497.578862 517.499716 492.430719 517.499716 486.081221 C 517.499716 479.728037 511.904545 474.579894 504.998295 474.579894 C 498.095739 474.579894 492.500568 479.728037 492.500568 486.081221' },
    { svg: 'M 9.539489 9.12441 L 500.655114 481.839623 M -63.500568 16.439416 L -64.50142 17.43809 M 8.642045 490.580778 L 508.499432 12.437353 M 844.50142 110.436321 L 844.50142 108.438974 M 826.500852 114.438384 L 833.499432 114.438384 M 867.498864 107.436616 L 866.501705 107.436616 M 2.500284 13.937205 C 2.500284 20.290389 8.095455 25.438532 15.001705 25.438532 C 21.904261 25.438532 27.499432 20.290389 27.499432 13.937205 C 27.499432 7.587706 21.904261 2.439564 15.001705 2.439564 C 8.095455 2.439564 2.500284 7.587706 2.500284 13.937205 M 492.500568 13.937205 C 492.500568 20.290389 498.095739 25.438532 504.998295 25.438532 C 511.904545 25.438532 517.499716 20.290389 517.499716 13.937205 C 517.499716 7.587706 511.904545 2.439564 504.998295 2.439564 C 498.095739 2.439564 492.500568 7.587706 492.500568 13.937205 M 2.500284 486.081221 C 2.500284 492.430719 8.095455 497.578862 15.001705 497.578862 C 21.904261 497.578862 27.499432 492.430719 27.499432 486.081221 C 27.499432 479.728037 21.904261 474.579894 15.001705 474.579894 C 8.095455 474.579894 2.500284 479.728037 2.500284 486.081221 M 492.500568 486.081221 C 492.500568 492.430719 498.095739 497.578862 504.998295 497.578862 C 511.904545 497.578862 517.499716 492.430719 517.499716 486.081221 C 517.499716 479.728037 511.904545 474.579894 504.998295 474.579894 C 498.095739 474.579894 492.500568 479.728037 492.500568 486.081221' },
    { svg: 'M 9.539489 9.12441 L 500.655114 481.839623 M -63.500568 16.439416 L -64.50142 17.43809 M 8.642045 490.580778 L 508.499432 12.437353 M 844.50142 110.436321 L 844.50142 108.438974 M 826.500852 114.438384 L 833.499432 114.438384 M 867.498864 107.436616 L 866.501705 107.436616 M 2.500284 13.937205 C 2.500284 20.290389 8.095455 25.438532 15.001705 25.438532 C 21.904261 25.438532 27.499432 20.290389 27.499432 13.937205 C 27.499432 7.587706 21.904261 2.439564 15.001705 2.439564 C 8.095455 2.439564 2.500284 7.587706 2.500284 13.937205 M 492.500568 13.937205 C 492.500568 20.290389 498.095739 25.438532 504.998295 25.438532 C 511.904545 25.438532 517.499716 20.290389 517.499716 13.937205 C 517.499716 7.587706 511.904545 2.439564 504.998295 2.439564 C 498.095739 2.439564 492.500568 7.587706 492.500568 13.937205 M 2.500284 486.081221 C 2.500284 492.430719 8.095455 497.578862 15.001705 497.578862 C 21.904261 497.578862 27.499432 492.430719 27.499432 486.081221 C 27.499432 479.728037 21.904261 474.579894 15.001705 474.579894 C 8.095455 474.579894 2.500284 479.728037 2.500284 486.081221 M 492.500568 486.081221 C 492.500568 492.430719 498.095739 497.578862 504.998295 497.578862 C 511.904545 497.578862 517.499716 492.430719 517.499716 486.081221 C 517.499716 479.728037 511.904545 474.579894 504.998295 474.579894 C 498.095739 474.579894 492.500568 479.728037 492.500568 486.081221' }
]

const data_forIntern_01 = [
    {
        id: 7,
        background: '#8d8d91',
        heading2: `Internship #1`,
        content2: `Planning and Decision Aid Support`,
        heading3: `Login Unit Test for Chat-Locker`,
        content3: `So I quickly realized how poor of an example I provided in the past, as all my examples failed miserably to demonstrate practical and actual case scenarios of a Unit Test in real action. Also to be quite frank, I honestly needed to do more research before I can begin to explain a structure or process. Below I have crafted a unit test for the chat locker login module. I realized how more fluid unit testing become once I began to plan ahead. Before any Unit Testing its always a good idea to write down a table of all the case scenarios so that we do not overthink our unit tests. Initially I planned using a notepad, then I formatted it thoroughly in Excel. From there I structured my code with empty but descriptive method names.${'\n\n'}Now a big step that most people skip is to simply study a component. In this case I studied the login module. Why is this so? Greattttt questionnnn. A unit test is being able to take pre-defined inputs and expect an output. This expected output would hint the overall behavior of your component. You would need to understand the overall behavior so your unit testing is thorough in every case. Lets put all this generalized explanation into something more tangible.${'\n\n'}For the login module we had had the option of using either a valid Username or Email paired with a valid Password as pictured below:${'\n\n'}`,
        image1: `intern-01-img-03`,
        content4: `So it is important to note that we can only use one or the other; either username and email and never the two at once. Below we have 8 possible cases that I was able to come up with. (These are neatly organized to match each test case with the code below where I have also filled each strings specifically used in each test).${'\n\n'}Remember we are assuming that the user has the valid credentials of a username "someUser", a password of "secret123" and an email of "validEmail@gmail.com". Note: This test will not work if you do not already have that user registered! So go to http://localhost:3000 and register a user before running the example code below.${'\n\n'}So to begin we will map out each case scenario using this table.${'\n\n'}                                   Test Case Possibilities${'\n'}   ----------------------------------------------------------------------------------${'\n'}    Test | Username   | Email                           | Password    | Result${'\n'}    ---------------------------------------------------------------------------------${'\n'}    1     | asdfasdf     |                                    | "secret123" | FAIL${'\n'}    ---------------------------------------------------------------------------------${'\n'}    2     | "someUser" |                                    | qwerty        | FAIL${'\n'}    ---------------------------------------------------------------------------------${'\n'}    3     | asdfasdf     |                                    | qwerty        | FAIL${'\n'}    ---------------------------------------------------------------------------------${'\n'}    4     |                  | zxcv@gmail.com            | "secret123" | FAIL${'\n'}    ---------------------------------------------------------------------------------${'\n'}    5     |                  | "validEmail@gmail.com" | qwerty        | FAIL${'\n'}    ---------------------------------------------------------------------------------${'\n'}    6     |                  | zxcv@gmail.com           | qwerty        | FAIL${'\n'}    ---------------------------------------------------------------------------------${'\n'}    7     | "someUser" |                                   | "secret123" | PASS${'\n'}    ---------------------------------------------------------------------------------${'\n'}    8     |                  | "validEmail@gmail.com" | "secret123" | PASS${'\n\n'}Now that we have organized all the possible cases for this Unit Test I began first constructing each method with a descriptive name (ie invalidUsernameWithValidPassLoginShouldFail(). Also it is good to use the keyword "Should" in each method name as it reinforces if a test case should fail or pass. And finally a good unit test should be simple and would have One assert. Before I begin with the code lets recap some important steps.${'\n\n'}Key Things To Remember:${'\n\n'}    1. Always plan ahead of time I learned this one the hard way.. My first attempt at this took a day but the second time around it only${'\n'}       took half an hour!${'\n\n'}    2. Use descriptive Unit Test Names Important for you and people reviewing your code${'\n\n'}    3. Define if a Fail or Pass with "Should" in the name for a method${'\n\n'}    4. Assert one thing per Unit Test (if your test has multiple asserts, you are likely doing it wrong! Multiple asserts is acceptable but${'\n'}       strive to check one thing at a time to ensure one fail or pass per test)${'\n\n'}And now lets see all of these in action!`,
        heading5: `${'\n'}Example:`,
        content5: ` /***** loginTest.java *****/${'\n'} package myPackages;${'\n\n'} import org.junit.*;${'\n'} import org.openqa.selenium.By;${'\n'} import org.openqa.selenium.WebDriver;${'\n'} import org.openqa.selenium.WebElement;${'\n'} import org.openqa.selenium.safari.SafariDriver;${'\n'} import org.openqa.selenium.support.ui.ExpectedConditions;${'\n'} import org.openqa.selenium.support.ui.WebDriverWait;${'\n\n'} public class testclass {${'\n\n'}    public static WebDriver driver;${'\n'}    /*  Declare static information here so that if code breaks due to text${'\n'}     *  changes, it is easily fixed. This login unit test will only work if${'\n'}     *  you create an account with the valid credentials first assuming.${'\n'}     *  ${'\n'}     *  Username: someUser${'\n'}     *  Password: secret123${'\n'}     *  Email: validEmail@gmail.com  */${'\n'}    public static String URL_CHATLOCKER_MAIN = "http://localhost:3000";${'\n'}    public static String VALID_USERNAME = "someUser";${'\n'}    public static String VALID_PASSWORD = "secret123";${'\n'}    public static String VALID_EMAIL = "validEmail@gmail.com";${'\n\n'}    public static String INVALID_USERNAME = "asdfasdf";${'\n'}    public static String INVALID_PASSWORD = "qwerty";${'\n'}    public static String INVALID_EMAIL = "zxcv@gmail.com";${'\n'}    public static String ERROR_MESSAGE = "User not found or incorrect password";${'\n'}    public static String HOME_TITLE = "Home";${'\n\n'}    /*  Declare all your elements here using By it will make your code cleaner${'\n'}     *  and simple.  */${'\n'}    private By usernameOrEmailFieldLocator = By.id("emailOrUsername");${'\n'}    private By passwordFieldLocator = By.id("pass");${'\n'}    private By loginButtonLocator = By.className("button primary login");${'\n'}    private By BannerLocator = By.id("toast-container");${'\n'}    private By HomeHeaderLocator =${'\n'}        By.xpath("//*[@id=\\"rocket-chat\\"]/div[3]/section/header/h2/span");${'\n\n'}    private void inputLoginFieldsWith(String usernameOrEmail, String password) {${'\n'}        driver.findElement(usernameOrEmailFieldLocator).sendKeys(usernameOrEmail);${'\n'}        driver.findElement(passwordFieldLocator).sendKeys(password);${'\n'}        driver.findElement(loginButtonLocator).click();${'\n'}    }${'\n'}    ${'\n'}    /*  This method below will be called once before the whole class.  */${'\n'}    @BeforeClass ${'\n'}    public static void setupTheDriverObject() {${'\n'}        driver = new SafariDriver();${'\n'}    }${'\n'}     ${'\n'}    @Before${'\n'}    public void getThePageWeWantToTest() {${'\n'}        /*  I just refresh page since it begins each test with a controlled${'\n'}         *  starting point more in-depthunit testing within the app will have${'\n'}         *  to manually login and navigate to your components.  */${'\n'}        driver.get(URL_CHATLOCKER_MAIN);${'\n'}        /*  This tells the driver to wait for the username/email field element${'\n'}         *  to load otherwise it will fail the test within 10 secs.  */${'\n'}        new WebDriverWait(driver, 10)${'\n'}                .until(ExpectedConditions${'\n'}                .presenceOfElementLocated(usernameOrEmailFieldLocator));${'\n'}    }${'\n'}     ${'\n'}    @AfterClass /*  This will be called After ALL tests complete.  */${'\n'}    public static void closeDriver(){${'\n'}        driver.quit(); /*  Closes driver and browser window.  */${'\n'}    }${'\n\n'}    @Test /*  #1. This is a Unit Test Identifier.  */${'\n'}    public void invalidUsernameWithValidPassLoginShouldFail() {${'\n'}        /*  Notice the Should Fail and descriptive method name, dont be shy!${'\n'}         *  I simply pass in my predefined conditions that we planned in the${'\n'}         *  table above.  */${'\n'}        inputLoginFieldsWith(INVALID_USERNAME, VALID_PASSWORD); ${'\n'}        /*  This will wait for the notification banner to appear.  */${'\n'}        WebElement banner = (new WebDriverWait(driver, 10))${'\n'}                .until(ExpectedConditions${'\n'}                .presenceOfElementLocated(BannerLocator));${'\n'}        /*  When it does appear we will compare what we expect for it to${'\n'}         *  display when a login fails.  */${'\n'}        Assert.assertEquals(banner.getText(), ERROR_MESSAGE);${'\n'}    }${'\n'}     ${'\n'}    @Test /*  #2.  */${'\n'}    public void ValidUsernameWithInvalidPasswordShouldFail() {${'\n'}        inputLoginFieldsWith(VALID_USERNAME, INVALID_PASSWORD);${'\n'}        WebElement banner = (new WebDriverWait(driver, 10))${'\n'}                .until(ExpectedConditions${'\n'}                .presenceOfElementLocated(BannerLocator));${'\n'}        Assert.assertEquals(banner.getText(), ERROR_MESSAGE);${'\n'}    }${'\n\n'}    @Test /*  #3.  */${'\n'}    public void invalidUsernameAndInvalidPasswordShouldFail() {${'\n'}        inputLoginFieldsWith(INVALID_USERNAME, INVALID_PASSWORD);${'\n'}        WebElement banner = (new WebDriverWait(driver, 10))${'\n'}                .until(ExpectedConditions${'\n'}                .presenceOfElementLocated(BannerLocator));${'\n'}        Assert.assertEquals(banner.getText(), ERROR_MESSAGE);${'\n'}    }${'\n\n'}    @Test /*  #4  */${'\n'}    public void invalidEmailWithValidPasswordShouldFail() {${'\n'}        inputLoginFieldsWith(INVALID_EMAIL, VALID_PASSWORD);${'\n'}        WebElement banner = (new WebDriverWait(driver, 10))${'\n'}                .until(ExpectedConditions${'\n'}                .presenceOfElementLocated(BannerLocator));${'\n'}        Assert.assertEquals(banner.getText(), ERROR_MESSAGE);${'\n'}    }${'\n\n'}    @Test /*  #5  */${'\n'}    public void validEmailWithInvalidPasswordShouldFail() {${'\n'}        inputLoginFieldsWith(VALID_EMAIL, INVALID_PASSWORD);${'\n'}        WebElement banner = (new WebDriverWait(driver, 10))${'\n'}                .until(ExpectedConditions${'\n'}                .presenceOfElementLocated(BannerLocator));${'\n'}        Assert.assertEquals(banner.getText(), ERROR_MESSAGE);${'\n'}    }${'\n\n'}    @Test /*  #6.  */${'\n'}    public void invalidEmailWithInvalidPasswordShouldFail() {${'\n'}        inputLoginFieldsWith(INVALID_EMAIL, INVALID_PASSWORD);${'\n'}        WebElement banner = (new WebDriverWait(driver, 10))${'\n'}                .until(ExpectedConditions${'\n'}                .presenceOfElementLocated(BannerLocator));${'\n'}        Assert.assertEquals(banner.getText(), ERROR_MESSAGE);${'\n'}    }${'\n\n'}    @Test /*  #7.  */${'\n'}    public void ValidUsernameWithValidPasswordShouldPass() {${'\n'}        /*  This case uses valid inputs to login.  */${'\n'}        inputLoginFieldsWith(VALID_USERNAME, VALID_PASSWORD);${'\n'}        /*  When we do login I will wait at least 10 seconds for the tile${'\n'}         *  component in the next page to load which is <h2>Home</h2>.  */${'\n'}        WebElement HomeHeader = (new WebDriverWait(driver, 10))${'\n'}                .until(ExpectedConditions${'\n'}                .presenceOfElementLocated(HomeHeaderLocator));${'\n'}        /*  When it has loaded lets compare and ensure it is Home.  */${'\n'}        Assert.assertEquals(HomeHeader.getText(), HOME_TITLE);${'\n'}    }${'\n\n'}    @Test /*  #8.  */${'\n'}    public void ValidEmailWithValidPasswordShouldPass() {${'\n'}        inputLoginFieldsWith(VALID_EMAIL, VALID_PASSWORD);${'\n'}        WebElement HomeHeader = (new WebDriverWait(driver, 10))${'\n'}                .until(ExpectedConditions${'\n'}                .presenceOfElementLocated(HomeHeaderLocator));${'\n'}        Assert.assertEquals(HomeHeader.getText(), HOME_TITLE);${'\n'}    }  ${'\n'} }${'\n\n'}`
    },
    {
        id: 6,
        background: '#8d8d91',
        heading2: `Internship #1`,
        content2: `Planning and Decision Aid Support`,
        heading3: `Best Practices`,
        content3: `This is an example using JUnit and Selenium which demonstrates navigating to the current top trending video on youtube. In this example you will see Best Practices applied in simple form.${'\n\n'}Note: This is just to get started and does not demonstrate an actual unit test. Go to the next page for a Unit Test Example.${'\n\n'}Lets take a look at the code below and then discuss the best practices that I have applied.`,
        content4: `1. Try to avoid the use of ImplicitWait and instead use ExplicitWait or even better FluentWait. Reason: Loading elements may vary from page to page so predictable loading times are difficult to guess. Implicit wait is used to wait x amount of time despite an element already being loaded (which could slow down the test overall when you have several thousand lines combined). The mixture of implicit and explicit may also result in unwanted unpredictability. (ie. If you implicitly wait 3 seconds for a page to load but it loads at 5 seconds, then any attempts to access it's DOM may result in errors)${'\n\n'} 2. Do not use Selenium alone, instead also incorporate JUnit or TestNG or some other Frameworks for better coverage. Selenium has its advantages and disadvantages. In the code below you will see the use of JUnit. I found the greatest useful portion of JUnit is the method order execution tags (@before , @test and @after). In the test below I invoke one of each such as below in case 1.${'\n\n'}   Case 1:${'\n'}   →@Before    beforeTestMethod()${'\n'}   →@Test       TestMethod()${'\n'}   →@After      afterTestMethod()${'\n'}   This will run in execution order of: beforeTestMethod(), TestMethod(), afterTestMethod()${'\n\n'}   Case 2:${'\n'}   →@Before    beforeTestMethod()${'\n'}   →@Test       TestMethod()${'\n'}   →@Test       AnotherTestMethod()${'\n'}   →@After      afterTestMethod()${'\n'}   This will run in execution order of:${'\n'}   beforeTestMethod(), TestMethod(), afterTestMethod(), beforeTestMethod(), AnotherTestMethod(), afterTestMethod()${'\n\n'}   ***Notice how the Before and After execution calls are always called afterwards${'\n\n'} 3. Never hard code. This one is easier said than done but as each test is more automated, the more code coverage you can perform as well as still have your code become more rigid towards code changes. A great way is to declare static variables at the beginning of a class and class those instead.`,
        heading5: `${'\n'}Example:`,
        content5: `/***** youtubeTest.java *****/${'\n'} package myPackage;${'\n\n'} import java.util.concurrent.TimeUnit;${'\n'} import org.junit.After;${'\n'} import org.junit.Before;${'\n'} import org.junit.Test;${'\n'} import org.openqa.selenium.By;${'\n'} import org.openqa.selenium.NoSuchElementException;${'\n'} import org.openqa.selenium.WebDriver;${'\n'} import org.openqa.selenium.WebElement;${'\n'} import org.openqa.selenium.safari.SafariDriver;${'\n'} import org.openqa.selenium.support.ui.FluentWait;${'\n'} import org.openqa.selenium.support.ui.Wait;${'\n'} import com.google.common.base.Function;${'\n\n'} //this will open youtube and go to a trending video${'\n'} public class YoutubeTest {${'\n'}    private String testUrl = "https://www.youtube.com"; ${'\n'}    private WebDriver driver; ${'\n\n'}    private By trendingGuideLinkLocator = By.cssSelector("#trending-guide-item");${'\n'}    private By trendingLinkLocator = By.xpath("//h2[contains(.,'Trending')]");${'\n\n'}    @Before${'\n'}    public void GetYoutube() {${'\n'}        driver = new SafariDriver();${'\n'}        driver.get(testUrl);${'\n'}        System.out.println("Set Driver " + driver + "for url: " + testUrl);${'\n'}    }${'\n\n'}    @Test${'\n'}    public void GoToTrendingPage() {${'\n'}        driver.findElement(trendingLinkLocator).click(); ${'\n'}        driver.findElements(trendingGuideLinkLocator).get(3).click();${'\n'}    }${'\n\n'}    @After${'\n'}    public void EndTest() {${'\n'}        driver.close();${'\n'}        driver.quit();${'\n'}    }${'\n'}}${'\n\n'}`
    },
    {
        id: 5,
        background: '#8d8d91',
        heading2: `Internship #1`,
        content2: `Planning and Decision Aid Support`,
        heading3: `Installing WebDriver 3 with Safari Driver:`,
        content3: `Selenium 3 is a solution that provides the pitfalls that Selenium 2 and WebDriver alone could not overcome in the past. As browser interaction grew more complicated, so did webpage designs, making complete automation browser solutions an issue. Upgrading from Selenium 2 to Selenium 3 is a drop in upgrade (and if you have a current selenium project you would like to upgrade you can just drop your 3.0 jar in place of the 2.0).${'\n\n'}Below are a list of open source projects using selenium as test integration for the following Web Applications:${'\n\n'}    # | Project Name   | Selenium Version | Language | Website URL${'\n'}    ------------------------------------------------------------------------------------------------------------${'\n'}    1 | Fandom Wikia  | Selenium 3.0       | Java        | http://fandom.wikia.com${'\n'}       |                      |                          |               | https://github.com/Wikia/app${'\n'}       |                      |                          |               | https://github.com/Wikia/selenium-tests${'\n'}    -----------------------------------------------------------------------------------------------------------${'\n'}    2 | PayPal: SeLion | Selenium 2.53.x  | Java        | https://github.com/PayPal/SeLion${'\n'}       |                       | Selenium 3.x      |               |${'\n'}    -----------------------------------------------------------------------------------------------------------${'\n'}    3 | Mozilla             | Selenium 3.0     | Python     | https://github.com/mozilla/moztrap-tests${'\n\n'}Note: We will only discuss Selenium WebDriver using the SafariDrivers; however, it is good to note that you can use any browser (ie. Chrome, Firefox, IE) you like as long as the Browser is Supported By Selenium.${'\n\n'}Running Selenium within Safari requires the following requirements if you want to use Selenium 3:${'\n\n'}1. Safari Browser v10 and Up - If you safari browser is not supported and you want to use Selenium 3, you must update your safari by updating your MAC OSX version to the latest to receive the latest installation of safari.${'\n\n'}2. Now since we are using the latest version of Safari, it natively supports SafarWebDriver but you must enable it. To do so go to${'\n'}Safari>Preferences>Advanced> Tick "Show Develop Menu" in the Menu Bar such as below:${'\n\n'}`,
        image1: `intern-01-img-01`,
        content4: `Now you should have Develop in the Safari Menu bar. Go to Develop>Allow Remote Automation${'\n\n'}3. Select your language of choice Here (Java, C#, Ruby, Python, Javascript w/Node) for our case we will be using the Java Language${'\n'}Bindings downloaded here (http://selenium-release.storage.googleapis.com/3.0/selenium-java-3.0.1.zip):${'\n\n'}4. Download the JDK here (http://www.oracle.com/technetwork/java/javase/downloads/jdk8-downloads-2133151.html).${'\n'}Any binary will do and install it for your operating system. (Need admin rights) Make sure to accept the license agreement at the top:${'\n\n'}5. Install an IDE of your choice (for our case we will use Eclipse).${'\n\n'}6. Create a new Java Project (File>New>Java Project and Enter Any Project Name) then press finish.${'\n\n'}7. Create a package (File>New>Package) and enter a name (ie. myPackage) then click Finish. Now import the language bindings (Right Click on the Project File>Properties. When a window pops up, click on 'Java Build Path' then go to the 'Libraries' Tab and on the side select "Add External JARS". Add the Language Bindings you downloaded from Step 2. Make sure to install the "Client" file as well as all the Jars within the Lib Folder.${'\n\n'}8. Now we can Create a Class (File>New>class), give it a name (ie. test.java) and ensure you${'\n'}tick "Public static void" such as the image below and youre ready to begin.${'\n\n'}(Copy and Paste the following "test.java" code below to run selenium. Notice we are calling the SafariDriver. You should see your safari browser open, go to the javascriptkit.com link and click on a popup then briefly close)${'\n\n'}`,
        image2: `intern-01-img-02`,
        content5: `/***** test.java *****/${'\n'} package myPackage;${'\n\n'} import java.util.concurrent.TimeUnit;${'\n\n'} import org.openqa.selenium.By;${'\n'} import org.openqa.selenium.WebDriver;${'\n'} import org.openqa.selenium.safari.SafariDriver;${'\n\n'} public class test {${'\n\n'}    public static void main(String[] args) {${'\n'}        //creates a new driver object for safari (only for safariv10.x)${'\n'}        WebDriver driver = new SafariDriver();       ${'\n'}        //navigate to url${'\n'}        driver.get("http://www.javascriptkit.com/javatutors/event2.shtml");${'\n'}        //maximize browser window${'\n'}        driver.manage().window().maximize();${'\n'}        //wait 5 seconds${'\n'}        driver.manage().timeouts().implicitlyWait(5, TimeUnit.SECONDS);${'\n'}        //find element via xPath and simulate a button click${'\n\n'}    driver.findElement(By.xpath("//*${'\n'}            [@id='contentcolumn']/div[1]/table/tbody/tr/td[2]/form/input")).click();${'\n'}        //close selenium port${'\n'}        driver.quit();${'\n'}    }${'\n'}}${'\n\n'}`
    },
    {
        id: 4,
        background: '#8d8d91',
        heading2: `Internship #1`,
        content2: `Planning and Decision Aid Support`,
        heading3: `Installing Chat Locker:`,
        content3: `Assignees: Sonia Tran, Onochie Ani, Adrian Alonzo, Deusseimonzhadd Arcinue, Kent Vo${'\n\n'}Task Originally from (Brent Brockman)${'\n'}    ${'\u2022'} Learn how other web projects on github use selenium web driver tests. ${'\n'}        ${'\u25e6'} Where in the source code do they put them?${'\n'}        ${'\u25e6'} How are they executed?${'\n'}        ${'\u25e6'} After looking at a couple, document best practices for the previous 2 bullets.${'\n'}    ${'\u2022'} Create an account on github if you don't already have one${'\n'}    ${'\u2022'} Email me your username. I will add you to the jedis team and the sscpac organization (https://github.com/sscpac)${'\n'}    ${'\u2022'} Checkout the feature/jedis-<insert the # of this task> (ex. feature/jedis-252)${'\n'}    ${'\u2022'} Start coding some tests in our source in the best place for a best practice.${'\n'}    ${'\u2022'} Check in every day you work on it.${'\n\n'}Our task in the last couple of weeks is to focus on Unit Testing for the Chat Locker repo on github found here: (https://github.com/sscpac/chat-locker).${'\n\n'}Recap:${'\n'}    ${'\u2022'} To recap the task is to create UnitTests for the chat-locker. A unit test is testing one small component like a login module.${'\n'}    ${'\u2022'} ie. A login you would test for the username or password if it is valid, invalid, contains illegal characters and a successfully logging${'\n'}      in with the login button.${'\n\n'}Lets begin: ${'\n'}(The project requires Meteor's dependencies to be installed on your machine.)${'\n\n'}1. Install Meteor: https://www.meteor.com/install${'\n\n'}2. Change directory to a folder and clone the git chat locker, make sure to switch to the proper${'\n'}    branch via checkout command and run meteor to host the project like so:${'\n\n'}    $ git clone https://github.com/sscpac/chat-locker.git${'\n'}    $ cd chat-locker${'\n'}    $ git checkout feature/jedis-252${'\n'}    $ meteor${'\n\n'}3. The app should be served locally at localhost:3000${'\n\n'}Great! If you don't have any issues, lets try out a Unit Test.${'\n\n'}`
    },
    {
        id: 3,
        welcome1: `Automated Functional Testing${'\n\n'}with Selenium WebDriver`
    },
    {
        id: 2,
        background: '#8d8d91',
        heading2: `Internship #1`,
        content2: `Planning and Decision Aid Support`,
        heading3: `Introduction:`,
        content3: `From: Brent Brockman${'\n\n'}Hello All,${'\n'}    I'm going to give you a 4 week task to give you some real work experience that you can put on your resume. Not just writing automated functional tests, but working as a remote development team.${'\n\n'}Now you have some challenges that I realize, but this is how it works on most github projects :)${'\n'}    1. You don't know each other.${'\n'}    2. You have to find how to communicate to each other - I'm sure you can figure this one out.${'\n'}    3. You have different skill sets`,
        heading4: `${'\n'}Project Definition:`,
        content4: `Can you prioritize learning and writing safari web driver tests for chat-locker (on github)? I would like for you to do the following:${'\n\n'}    ${'\u2022'} Learn how other web projects on github use selenium web driver tests.${'\n'}        ${'\u25e6'} Where in the source code do they put them?${'\n'}        ${'\u25e6'} How are they executed?${'\n'}        ${'\u25e6'} After looking at a couple, document best practices for the previous 2 bullets.${'\n'}    ${'\u2022'} Read selenium web driver documentation${'\n'}    ${'\u2022'} For those of you with cacs can you copy these best practices to our di2e wiki?${'\n'}    ${'\u2022'} Create an account on github if you don't already have one${'\n'}    ${'\u2022'} Email me your username. I will add you to the github jedis team and the github sscpac organization (which will also look good for ${'\n'}      you)${'\n'}    ${'\u2022'} Create a branch off of the feature/jedis-252${'\n'}        ${'\u25e6'} You can follow the directions on the Rocket-Chat project on how to develop here:${'\n'}           https://github.com/RocketChat/Rocket.Chat#development${'\n'}    ${'\u2022'} Work together to define what test cases you need to do${'\n'}    ${'\u2022'} Create some github issues on the chat-locker project defining all test cases you decid to do. (you can also create a general issue to ${'\n'}      communicate the best practices)${'\n'}    ${'\u2022'} For each issue:${'\n'}        ${'\u25e6'} Assign it to someone${'\n'}        ${'\u25e6'} Create a branch off from feature/jedis-252 and name it according to your issue name (if your issue is #79, name your branch ${'\n'}          feature/chat-locker-79)${'\n'}        ${'\u25e6'} Start coding your test in the best place according to the best practices you found.${'\n'}        ${'\u25e6'} Checkin every day you work on it.${'\n'}        ${'\u25e6'} When complete, create a pull request to merge it back into feature/jedis-252 (see attached image for help)${'\n'}        ${'\u25e6'} Celebrate${'\n\n'}Please use me as a reference as much as you want for any questions. These include clarification questions on the scope of the task.${'\n\n'}Reid Wakida is cc'd. He is my lead software engineer and he was the primary developer of our rocket-chat application. He is one of the smartest people you'll meet. He can answer some questions regarding development / github, but likely not selenium.${'\n\n'}NOTE: If you email Reid or myself, please make sure you have done your research first to try and figure out the question (unless you have no idea where to start).${'\n\n'}I'd prefer communication like this:${'\n\n'}Brent,${'\n'}Do you know how to do x? I've tried a, b, and c but I don't think I'm going in the right direction. Please make sure a, b, or see includes searching google :)${'\n\n'}Thank you,${'\n'}Brent${'\n\n'}Brent Brockman${'\n'}SSC Pacific Code XXXXX${'\n'}Head, Defense Command Center Engineering Branch${'\n'}Software Development Lead${'\n'}Joint Engineering Development and Information Security (JEDIS) Project${'\n'}SPAWAR Systems Center – Pacific${'\n'}Office: XXXXX-XXX${'\n'}Phone: (619)553-1455`
    },
    {
        id: 1,
        profile: 'industry-profile',
        background: '#8D8D91',
        heading1: 'STATUS:',
        content1: `TYPE:               PART-TIME${'\n'}DURATION:       4 MONTHS${'\n'}PROGRESS:      COMPLETED${'\n'}CLEARANCE:    SECRET`,
        heading2: 'Internship #1',
        content2: `Planning and Decision Aid Support`,
        heading3: `BACKGROUND:`,
        content3: `Naval Information Warfare Center Pacific (NIWC Pacific), formerly known as "SSC Pacific (SPAWAR Systems Command Pacific)", is an organization within the United States Navy and provide military with essential capabilities in the areas of command and control, communications, computers, intelligence, surveillance, and reconnaissance (C4ISR), cyber, and space. Based in San Diego, California, NIWC Pacific is ranked as a top generator of patents and license agreements (155 patent disclosures, 100 patent applications filed, and 50 patents issued in fiscal year 2017).`,
        heading4: `${'\n'}EXPERIENCE:`,
        content4: `Funded by the Research Foundation at San Diego State University (SDSU), I was hired for a Student Contractor position during my Junior year as an undergraduate. The job allowed remote work and flexible hours in order to mandate studying as top priority. During the four month position at NIWC Pacific, I was able to gain real world experience and the opportunity to achieve a Secret Security Clearance. Some of the experience included working on mission critical systems, collaborating as part of a team, implementing with state-of-the-art technologies, and more explained later. The following next slides will now showcase in technical details the work and results my team and I produced for the task assigned.`
    }
]

const data_forIntern_02 = [
    {
        id: 2,
        background: '#8d8d91',
        heading2: 'Internship #2',
        content2: 'Wiki/JIRA Tool Development',
        heading3: 'Statement of Work:',
        content3: `Contract No: XXXXXXX-XXX${'\n'}Delivery Order No: XXXXXX-X${'\n'}Task Title: Wiki/JIRA Tool Development${'\n'}Date: 13 February 2017${'\n'}SOW Task No: XXXXXXX-XXXX-XX${'\n\n'}1. Scope:${'\n'}This Statement of Work covers the need for the services of a college student(s) to provide technical and/or analytical support in the field of computer science and web applications for the Wiki/ JIRA Tool Development project. The purpose of this project is to develop Wiki and JIRA software tools that automate administrative and operational processes within Departments XXXX and XXX.${'\n\n'}1.1 Background:${'\n'}The Department Deputies for Operations are responsible for ensuring the administrative and operational processes within our departments are as efficient as possible. In support of this, it is necessary to develop online software tools that streamline these processes and make it easier for both employees and management to perform their day-to-day tasking. Since the Center has invested in the Wiki Confluence and JIRA products our focus is in developing tools for these platforms that improve our existing processes.${'\n\n'}2. Applicable Documents:${'\n'}N/A${'\n\n'}3. Technical Requirements:${'\n'}The contractor shall assist the work sponsor in:${'\n\n'}3.1 Development of Confluence Wiki web pages, tools and workflows. Creating or upgrading Department wiki sites and/or pages and graphics.${'\n\n'}3.2 Designing, developing, testing or reviewing web-based database structures, data correlation and conversion techniques. Designing and coding JIRA database tools and dashboards.${'\n\n'}3.3 Monthly Status Reports and Bi-Weekly Time Reports shall be in accordance with basic contract CDRL.${'\n\n'}4. Government-Furnished Property/Material:${'\n'}None${'\n\n'}5. Travel: None${'\n\n'}6. Other:${'\n\n'}6.1 Security:${'\n'}Contractor shall have SECRET clearance in accordance with XXXXX of the basic contract.${'\n\n'}6.2 Place of Performance:${'\n'}The contractor shall work at SSC Pacific, Topside 100% of the time. Student will be working primarily with Code XX and XXX, in TS building XXXX, room XX.${'\n\n'}6.3 COR:${'\n'} Erin Lyles, SSC Pacific Code XXXXX, 619-553-2463, erin.lyles@navy.mil${'\n\n'}6.4 Miscellaneous:${'\n'}Access to a computer on the Science and Technology network to perform the tasking.${'\n\n'}6.5 Qualifications of Personnel:${'\n\n'}6.5.1 Minimum Qualifications:${'\n'}Undergraduate Level 2 (Junior or Senior): Computer Science major.${'\n\n'}Required Course Work:${'\n'}Programming in C++ or Java, database languages, html.${'\n\n'}6.5.1.1 Additional Qualifications desired:${'\n'}Experience with Confluence Wiki or JIRA. Knowledge of JavaScript. Troubleshooting methods in software development.${'\n\n'}Skills:${'\n'}Familiarity with Windows operating systems and Web design language course. Leadership, ability to work well in a team, organization, management and presentation skills.${'\n\n'}6.6 Principal Work Assignment Sponsor:${'\n'}Kevin Murphy, SSC PAC Code XXXXXX, TS Building XXX-XXXXX, Room XXX, Phone 619-553-1876, and E-mail: kevin.t.murphy@navy.mil.`
    },
    {
        id: 1,
        profile: 'industry-profile',
        background: '#8D8D91',
        heading1: 'STATUS:',
        content1: `TYPE:               PART-TIME${'\n'}POSITION:        STUDENT CONTRACTOR${'\n'}DURATION:       5 MONTHS${'\n'}PROGRESS:      COMPLETED${'\n'}CLEARANCE:    SECRET`,
        heading2: 'Internship #2',
        content2: 'Wiki/JIRA Tool Development',
        heading3: `BACKGROUND:`,
        content3: `Naval Information Warfare Center Pacific (NIWC Pacific), formerly known as "SSC Pacific (SPAWAR Systems Command Pacific)", is an organization within the United States Navy and provide military with essential capabilities in the areas of command and control, communications, computers, intelligence, surveillance, and reconnaissance (C4ISR), cyber, and space. Based in San Diego, California, NIWC Pacific is ranked as a top generator of patents and license agreements (155 patent disclosures, 100 patent applications filed, and 50 patents issued in fiscal year 2017).`,
        heading4: `${'\n'}EXPERIENCE:`,
        content4: `Funded by the Research Foundation at San Diego State University (SDSU), I was hired for a Student Contractor position during my Senior year as an undergraduate. The job allowed partial remote work and flexible hours in order to mandate studying as top priority. During the five month position at NIWC Pacific, I was able to gain real world experience and the opportunity to achieve a Secret Security Clearance. Some of the experience included working on mission critical systems, presenting technical material to upper management, implementing with state-of-the-art technologies, and more explained later. The following next slide will detail the task assigned.`
    }
]

export default Industry;